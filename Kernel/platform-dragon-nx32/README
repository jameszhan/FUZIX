dragon-nx32
===========

Dragon (32 or 64) + external memory cartridge

This port is for running FUZIX on real Dragons using an external
memory cartridge which is being prototyped.

The cartridge can have from 2 to 256 banks of 32KB each (hence "nx32"). It
will map the active bank at 0x8000-0xFEFF, using the EXMEM (SLENB) signal to
hide the internal ROMs. Writing the bank number to FFBF selects the
bank and activates the cartridge. Writing to FFBE deactivates the
cartridge. It is only active if the SAM is in map type 0.

The port reserves the internal RAM at 0-0x7FFF plus bank 0 for the kernel.

The port can use DriveWire to mount the root filesystem, and most userland
tools are working.

Swapping to disk has not been implemented yet.

Emulating in XRoar
==================

XRoar can be patched with the included 0001-XRoar-emulate-nx32.patch
to emulate this memory cartridge.

Using DriveWire
===============

For bootstrapping, the fuzix.bin DECB binary must be loaded into
internal RAM and cartridge bank 0. This is currently done over
DriveWire, using a "DWLOAD" program tweaked for FUZIX. The changes
from stock DWLOAD are:
- do not enable interrupts upon execution of the payload
- jmp instead of jsr so that stack is not used
- default name of payload is "fuzix.bin"
- activate cartridge memory when writing payload to RAM
Additionally it is built to run from 0x600 so that FUZIX can
be loaded anywhere from 0x800 and up.

 lwasm --pragma=condundefzero -r -b -odwfuz.bin dwload.asm -DFUZIX -DRAMORG=0x600
Or for an emulator with Becker port:
 lwasm --pragma=condundefzero -r -b -odwfuzb.bin dwload.asm -DFUZIX -DRAMORG=0x600 -DBECKER
For XRoar, just add -load dwfuzb.bin to its invocation, and on the Dragon:
 EXEC&H600

For an emulator with Becker port while using the DragonDOS cartridge
 lwasm --pragma=condundefzero -r -b -odwfuzb.bin dwload.asm -DFUZIX -DRAMORG=0x600 -DBECKER -DBCKSTAT=0xFF49 -DBCKPORT=0xFF4A

To make an audio file for loading DWLOAD via the cassette port:
 makewav -r -c -odwfuz.wav dwfuz.bin
The makewav utility can be found at toolshed.sf.net
On the Dragon type: CLOADM:EXEC&H600

If you already have DWLOAD (in patched BASIC ROM), you can build
the FUZIZ loader as a "dweeb":
 lwasm -r -b -oDWFUZ dwload.asm -DFUZIX -DRAMORG=0x600 -DDWEEB 
On the Dragon type: DLOAD"DWFUZ" 

Note that if using the DW4 DriveWire server, all files must be padded to
a multiple of 256 bytes! Use for instance Kernel/tools/pad256

Quick build instructions
========================

# 1. Build the kernel:
make -C Kernel TARGET=dragon-nx32

- or for using DriveWire in an emulator (i.e. XRoar):

make -C Kernel TARGET=dragon-nx32 BECKER=1

# 2. Build the libraries
make -C Library tools/syscall_6809
make -C Library/libs -f Makefile.6809

# 3. Build the utils and applications
make -C Applications/util -f Makefile.6809 TARGET=dragon-nx32
make -C Applications/V7/cmd/sh -f Makefile.6809 TARGET=dragon-nx32
make -C Applications/levee -f Makefile.6809 TARGET=dragon-nx32
make -C Applications/cave -f Makefile.6809 TARGET=dragon-nx32
make -C Applications/dw -f Makefile.6809 TARGET=dragon-nx32

# 4. Build disk tools
make -C Standalone

# 5. Build boot disk image 
cd Standalone/filesystem-src
./build-filesystem -X fuzix.dsk 256 65535

